# Git Breakdown CI/CD configuration file.
stages:
  - build
  - test
  - deploy

# Stage I
# Build Phase:
# This is where the main code is built.
build:
  image: docker:dind
  stage: build
  before_script:
    - sudo docker-compose down
  script:
    - sudo docker-compose build --no-cache

# Stage II
# Testing Phase:
# This is where the main code is tested.
# Other options like code coverage, etc are also written in this phase
api_gateway:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to api_gateway
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/api_gateway install ./APIs/api_gateway

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/api_gateway
    - sudo docker-compose down

branches_request:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to branches_request
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/branches_request install ./APIs/branches_request

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/branches_request
    - sudo docker-compose down

pullrequests_request:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to pullrequests_request
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/pullrequests_request install ./APIs/pullrequests_request

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/pullrequests_request
    - sudo docker-compose down

issues_request:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to issues_request
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/issues_request install ./APIs/issues_request

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/issues_request
    - sudo docker-compose down

commits_request:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to commits_request
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/commits_request install ./APIs/commits_request

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/commits_request
    - sudo docker-compose down

profile_request:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to profile_request
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/profile_request install ./APIs/profile_request

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/profile_request
    - sudo docker-compose down

ranking_request:
  stage: test
  image: node:alpine
  before_script:
    # install requirement to ranking_request
    - echo "exports.token = '$GIT_TOKEN'" >> ./APIs/constants.js
    - npm --prefix ./APIs/ranking_request install ./APIs/ranking_request

  script:
    - sudo docker-compose up -d
    - npm test --prefix ./APIs/ranking_request
    - sudo docker-compose down

# Stage III
# Deploying Phase:
# This is where the main code is deployed to our server at AWS.
deploy:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
    - chmod a+x ./deploy/disableHostKeyChecking.sh

  script:
    - bash deploy/deploy.sh

  only:
    - master
